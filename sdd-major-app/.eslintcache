[{"/Users/dillon/projects/sdd-major/sdd-major-app/src/reportWebVitals.js":"1","/Users/dillon/projects/sdd-major/sdd-major-app/src/App.js":"2","/Users/dillon/projects/sdd-major/sdd-major-app/src/index.js":"3","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Home.js":"4","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Login.js":"5","/Users/dillon/projects/sdd-major/sdd-major-app/src/components/HomeAppBar.js":"6","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Register.js":"7","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Dashboard.js":"8","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/WordlistCreator.js":"9","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Viewer.js":"10","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/ModeSelection.js":"11","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Quiz.js":"12"},{"size":362,"mtime":1612162335286,"results":"13","hashOfConfig":"14"},{"size":1085,"mtime":1620345475895,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1612162335284,"results":"16","hashOfConfig":"14"},{"size":830,"mtime":1622580381714,"results":"17","hashOfConfig":"14"},{"size":3019,"mtime":1623506683383,"results":"18","hashOfConfig":"14"},{"size":587,"mtime":1622578969927,"results":"19","hashOfConfig":"14"},{"size":4475,"mtime":1623506695228,"results":"20","hashOfConfig":"14"},{"size":12801,"mtime":1623508409413,"results":"21","hashOfConfig":"14"},{"size":20295,"mtime":1623543481143,"results":"22","hashOfConfig":"14"},{"size":13280,"mtime":1622717816614,"results":"23","hashOfConfig":"14"},{"size":761,"mtime":1622673946244,"results":"24","hashOfConfig":"14"},{"size":7112,"mtime":1622717898988,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4op0ew",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"/Users/dillon/projects/sdd-major/sdd-major-app/src/reportWebVitals.js",[],["57","58"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/App.js",["59","60"],"import './App.css';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Dashboard from './pages/Dashboard';\nimport WordlistCreator from './pages/WordlistCreator';\nimport Viewer from './pages/Viewer';\nimport ModeSelection from './pages/ModeSelection';\nimport Quiz from './pages/Quiz';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <Home/>\n      </Route>\n      <Route path=\"/login\">\n        <Login/>\n      </Route>\n      <Route path=\"/register\">\n        <Register/>\n      </Route>\n      <Route path=\"/dashboard\">\n        <Dashboard />\n      </Route>\n      <Route path=\"/edit/:id\" component={WordlistCreator}>\n      </Route>\n      <Route path=\"/view/:id\" component={Viewer}>\n      </Route>\n      <Route path=\"/mode_select/:id\" component={ModeSelection}>\n      </Route>\n      <Route path=\"/quiz/:id\" component={Quiz}>\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/dillon/projects/sdd-major/sdd-major-app/src/index.js",[],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Home.js",["61","62"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';  \nimport HomeAppBar from '../components/HomeAppBar'\nimport '../css/Home.css'\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <HomeAppBar></HomeAppBar>\n          <br></br>\n          <h4 className=\"motto\">Language in the classroom made easy</h4>\n          <p className=\"mottoSubText\">Automated learning solution for EALD students</p>\n          <img src=\"/client/logopurple.png\" className=\"frontLogo\"></img>\n          <div className=\"actionButtons\">\n            <Link to=\"/register/\">\n              <button>\n                Get Started\n              </button>\n            </Link>\n          </div>\n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Login.js",["63","64","65","66","67","68","69","70"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/components/HomeAppBar.js",["71"],"import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/Header.css'\n\nexport default class HomeAppBar extends React.Component {\n  render() {\n    return (\n      <div>\n            <div className=\"HeaderContainer\">\n              <div className=\"actions\">\n                <h3>\n                  <Link to=\"/login\" className=\"link\">Sign In</Link>\n                </h3> \n                <h3>\n                  <Link to=\"/register\" className=\"link\">Register</Link>\n                </h3> \n              </div>\n            </div>\n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Register.js",["72","73","74","75","76","77","78"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Dashboard.js",["79"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/WordlistCreator.js",["80","81","82","83","84","85","86","87"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Viewer.js",["88","89","90","91","92","93","94","95","96"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react'\nimport { Paper, Button, \n    IconButton, TextField, \n    Dialog, DialogTitle, \n    Input, Select,\n    MenuItem } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport '../css/Viewer.css'\n\n// React class component for wordlist creation\nexport default class Viewer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // State variable for this component to store userDetails,\n        // as well as any details about a word being added in\n        // progress\n        this.state = {\n            userDetails: {\n                username: \"\",\n                email: \"\"\n            },\n            wordlistCode: \"\", // short id for wordlist\n            openWord: false, // is the dialog for creating a wordlist panel open?\n            wordToAdd: \"\", // a string storing the word to add\n            definitionToAdd: \"\", // a string storing the definition to add\n            wordTranslationToAdd: \"\", // a string storing the translation of a word\n            imageToAdd: \"\", // stores the base64 image string\n            definitionTranslationToAdd: \"\", // a string storing the translation of a word definition\n            words: [], // an array of words currently in the list\n            selectedWord: \"none\", // the currently selected word in the viewer,\n            targetLanguage: \"en\", // target language for translation\n        }\n    }\n\n    // Adding user details pre render\n    componentWillMount() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Gets the wordlist code from the URL parameters\n        let wordlistCode = this.props.match.params.id;\n        this.setState({\n            wordlistCode: wordlistCode\n        }, () => {\n            // Gets the current words to display in a wordlist\n            this.getWords();\n        })\n\n        // Calling API Endpoint to get user details based\n        // off the UID in sessionStorage\n        fetch('/api/userbase/get_user_by_uid', {\n            method: 'post',\n            headers: {\n              'Content-Type':  'application/json',\n            }, \n            body: JSON.stringify({\"uid\": uid})\n          })\n          // Get the response json\n          .then(response => response.json())\n          .then(data => {\n              // Sets the userDetails state to store whatever the server returned\n              this.setState({userDetails: data});\n        })\n    }\n\n    // Calls the addWord API Endpoint and then adds a given word\n    // to the current wordlist\n    addWord() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Instantiating a new file reader to convert \n        // user selected image to blob\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            console.log(reader.result)\n        })\n\n        // An object with all the data for the word to be added\n        let wordData = {\n            \"uid\": uid,\n            \"wordToAdd\": this.state.wordToAdd,\n            \"definitionToAdd\": this.state.definitionToAdd,\n            \"wordTranslationToAdd\": this.state.wordTranslationToAdd,\n            \"definitionTranslationToAdd\": this.state.definitionTranslationToAdd,\n            \"wordlistCode\": this.state.wordlistCode,\n            \"imageToAdd\": this.state.imageToAdd\n        }\n\n        // Calling the API Endpoint for adding a word\n        fetch('/api/wordlist/add_word', {\n            method: 'post',\n            headers: {\n              'Content-Type':  'application/json',\n            }, \n            // Sending word data to add\n            body: JSON.stringify(wordData)\n          })\n          // Get the response json\n          .then(response => response.json())\n          .then(data => {\n            // Setting the add new word panel to be closed\n            this.setState({\n                openWord: false\n            }, () => {\n                // Refresh the words displayed\n                this.getWords();\n            })\n        })\n    }\n\n    // When the file input has been changed, event handler\n    // is fileToBlob() which takes the data and finds the file\n    fileToBlob(eventData) {\n        // Instantiating a new file reader to convert \n        // user selected image to blob \n        const reader = new FileReader();\n        const file = eventData.target.files[0];\n\n        // Converts intoo a data blob and stores in state\n        reader.addEventListener(\"load\", () => {\n            // convert image file to base64 string\n            this.setState({\n                imageToAdd: reader.result\n            })\n        }, false);\n\n        // If there is a file, do use the reader instance\n        // to convert file into a data blob\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n\n    // Gets all the current words\n    // Gets all the current words\n    getWords() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Comprises a query to put in database for \n        // this specific wordlists's words\n        let wordlistData = {\n            \"uid\": uid,\n            \"wordlistCode\": this.state.wordlistCode,\n            \"targetLanguage\": this.state.targetLanguage\n        }\n\n        // Calling the get_words API endpoint\n        fetch('/api/wordlist/get_words', {\n            method: 'post',\n            headers: {\n                'Content-Type':  'application/json',\n            }, \n            // Sending wordlistData info to server\n            body: JSON.stringify(wordlistData)\n            })\n            // Get the response json\n            .then(response => response.json())\n            .then(data => {\n                for (let word in data[\"words\"]) {\n                    console.log(data[\"words\"][word])\n\n                    let translateData = {\n                        textToTranslate: data[\"words\"][word][\"word\"], \n                        targetLanguage: this.state.targetLanguage\n                    }\n\n                    fetch('/api/translate/basic_translate', {\n                        method: 'post',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(translateData)\n                    })\n                    .then(response => response.json())\n                    .then(d => {\n                        data[\"words\"][word][\"translated_word\"] = d.res.TranslatedText\n                    })\n\n                    translateData.textToTranslate = data[\"words\"][word][\"definition\"]; \n\n                    fetch('/api/translate/basic_translate', {\n                        method: 'post',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(translateData)\n                    })\n                    .then(response => response.json())\n                    .then(d => {\n                        data[\"words\"][word][\"translated_definition\"] = d.res.TranslatedText\n                    })\n                }\n                \n                // Setting the words to displayed from state to be server's\n                // response with words\n                this.setState({\n                    words: data[\"words\"]\n                })\n        }) \n    }\n\n    // Changes the selected word in the side panel from a given index\n    // This is the event handler for when a word is pressed for viewing\n    changeSelectedWord(selectedWordIndex) {\n        // Gets the current word data of the selected index\n        let selectedWordData = this.state.words[selectedWordIndex]\n        // Change the selected word\n        this.setState({\n            selectedWord: selectedWordData\n        }, () => {\n            // Debug statement to check selectedWord has appeared correctly\n            console.log(this.state.selectedWord)\n        })\n    }\n\n    // This is called by a map function for each word\n    renderWordCard() {\n        // Return an empty card indicating to select a word if no\n        // word has been selected\n        if (this.state.selectedWord === \"none\") {\n            return (\n                <Paper elevation={3} style={{width: \"700px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\", display: \"relative\"}}>\n                    <div style={{position: \"absolute\", top: \"65%\", left: \"50%\", width: \"300px\", height: \"300px\", marginTop: \"-150px\", marginLeft: \"-150px\"}}>\n                        <h1 style={{textAlign: \"center\"}} className=\"wordTitle\">No Word Selected</h1>\n                        <p style={{textAlign: \"center\"}}>Please select a word to view from the panel to the left</p>\n                    </div>\n                </Paper>  \n            )\n        } else {\n            // Return a styled word card with the appropriate information and image\n            return (\n                <Paper elevation={3} style={{width: \"700px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\"}}>\n                    <h2 style={{paddingLeft: \"5%\", paddingTop: \"5%\", textAlign: \"left\"}} className=\"wordTitle\">{this.state.selectedWord.word}</h2>\n                    <h3 style={{paddingLeft: \"5%\", textAlign: \"left\", color: \"grey\", fontWeight: \"400\"}}>{this.state.selectedWord.translated_word}</h3>\n                    <div style={{textAlign: \"center\"}}>\n                        <img src={this.state.selectedWord.img} style={{position: \"relative\", maxWidth: \"300px\", maxHeight: \"200px\"}}></img>\n                    </div>\n                    <br></br>\n                    <p style={{paddingLeft: \"5%\", paddingTop: \"1%\", textAlign: \"left\"}}>{this.state.selectedWord.definition}</p>\n                    <p style={{paddingLeft: \"5%\", paddingTop: \"1%\", textAlign: \"left\", color: \"grey\"}}>{this.state.selectedWord.translated_definition}</p>\n                </Paper>      \n            )\n        }\n    }\n\n    // Allows for the target language to be changed and new words retrieved\n    changeTargetLanguage(e) {\n        this.setState({\n            targetLanguage: e.target.value\n        }, () => {\n            this.getWords();\n        })\n    }\n\n    // Renders UI elements for the wordlist editor\n    render() {\n        if (this.state.accountType === \"student\") {\n            // Return Student Wordlist Editor (not implemented yet)\n        } else {\n            // Return Teacher Wordlist Editor UI Elements\n            return (\n                <div>\n                    <div style={{paddingTop: \"1%\"}}>\n                        <div style={{paddingRight: \"1%\", display: \"inline\"}}>\n                            <Button style={{float: \"right\"}} variant=\"outlined\" onClick={() => {window.location = `/mode_select/${this.state.wordlistCode}`}}>Practice Mode</Button>\n                        </div>\n                    </div>\n                    <div style={{marginLeft: \"2%\"}}>\n                        <div style={{display: \"inline-block\", marginRight: \"40%\"}}>\n                            <Paper elevation={3} style={{width: \"400px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\"}}>\n                                <div>\n                                    <div className=\"languageSelector\">\n                                        <div style={{position: \"absolute\", paddingLeft: \"5%\", paddingTop: \"5%\",}}>\n                                            <h2 style={{textAlign: \"left\"}} className=\"yourWords\">Your Words</h2>\n                                            <Select value={this.state.targetLanguage} onChange={(e) => { this.changeTargetLanguage(e) }}>\n                                                <MenuItem value=\"en\">English</MenuItem>\n                                                <MenuItem value=\"fr\">French</MenuItem>\n                                            </Select>\n                                        </div>\n                                        <div style={{paddingRight: \"5%\", paddingTop: \"12%\"}}>\n                                        </div>\n                                    </div>\n                                    <div style={{textAlign: \"center\", paddingTop: \"10%\"}}>\n                                        {\n                                            this.state.words.map((word, index) => {\n                                                // wordIndex refers to the index of the word within this.state.words\n                                                // for selection\n                                                let wordIndex = index\n                                                return (\n                                                    <Button style={{width: \"100%\", borderRadius: \"0\"}} onClick={() => this.changeSelectedWord(wordIndex)}>{word.word}</Button> \n                                                )\n                                            })\n                                        }\n                                    </div>\n                                </div>\n                            </Paper>\n                        </div>\n                        <div style={{display: \"inline-block\"}}>\n                            { this.renderWordCard() }\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/ModeSelection.js",["97","98","99","100","101"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// React class component for mode selection page\nexport default class ModeSelection extends React.Component {\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n                <h1>Mode Selection</h1>\n                <div style={{paddingTop: \"10px\"}}>\n                    <Button variant=\"outlined\" onClick={() => {window.location = `/quiz/${this.props.match.params.id}`}}>Quiz Me</Button>\n                </div>\n                <p>More modes coming soon</p>\n            </div>\n        )\n    }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Quiz.js",["102","103","104","105","106","107"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Swal from 'sweetalert2';\n\n// React class component for quiz mode\nexport default class Quiz extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // State variable for this component to store userDetails,\n        // as well as any details about a word being added in\n        // progress\n        this.state = {\n            userDetails: {\n                username: \"\",\n                email: \"\"\n            },\n            wordlistCode: \"\", // short id for wordlist\n            openWord: false, // is the dialog for creating a wordlist panel open?\n            wordToAdd: \"\", // a string storing the word to add\n            definitionToAdd: \"\", // a string storing the definition to add\n            wordTranslationToAdd: \"\", // a string storing the translation of a word\n            imageToAdd: \"\", // stores the base64 image string\n            definitionTranslationToAdd: \"\", // a string storing the translation of a word definition\n            words: [], // an array of words currently in the list\n            selectedWord: \"none\", // the currently selected word in the viewer,\n            answerValue: \"\", // the current value of the user typed in answer,\n            currentRandomWordData: {}, // Random word data of the current word\n            targetLanguage: \"fr\", // \n            isWordLoading: true\n        }\n    }\n\n    // Adding user details pre render\n    componentDidMount() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Gets the wordlist code from the URL parameters\n        let wordlistCode = this.props.match.params.id;\n        this.setState({\n            wordlistCode: wordlistCode\n        }, () => {\n            // Gets the current words to display in a wordlist\n            this.getWords();\n        })\n\n        // Calling API Endpoint to get user details based\n        // off the UID in sessionStorage\n        fetch('/api/userbase/get_user_by_uid', {\n            method: 'post',\n            headers: {\n                'Content-Type':  'application/json',\n            }, \n            body: JSON.stringify({\"uid\": uid})\n            })\n            // Get the response json\n            .then(response => response.json())\n            .then(data => {\n                // Sets the userDetails state to store whatever the server returned\n                this.setState({userDetails: data});\n        })\n    }\n\n    // Translates some given text into the target language in state\n    translateText(translateData) {\n        fetch('/api/translate/basic_translate', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(translateData)\n        }).then(response => response.json())\n        .then(data => {\n            console.log(data);\n        })\n    }\n    \n    // Gets all the current words\n    getWords() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Comprises a query to put in database for \n        // this specific wordlists's words\n        let wordlistData = {\n            \"uid\": uid,\n            \"wordlistCode\": this.state.wordlistCode,\n            \"targetLanguage\": this.state.targetLanguage\n        }\n\n        // Calling the get_words API endpoint\n        fetch('/api/wordlist/get_words_with_translations', {\n            method: 'post',\n            headers: {\n                'Content-Type':  'application/json',\n            }, \n            // Sending wordlistData info to server\n            body: JSON.stringify(wordlistData)\n            })\n            // Get the response json\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                // for (let word in data[\"words\"]) {\n                //     let translateData = {\n                //         textToTranslate: data[\"words\"][word][\"word\"], \n                //         targetLanguage: this.state.targetLanguage\n                //     }\n\n                //     let translatedWord = this.translateText(translateData);\n                //     console.log(\"bro\", data[\"words\"][word])\n                //     data[\"words\"][word][\"translated_word\"] = translatedWord;\n\n                //     translateData.textToTranslate = data[\"words\"][word][\"definition\"]; \n                //     let translatedDefinition = this.translateText(translateData); \n                //     data[\"words\"][word][\"translated_definition\"] = translatedDefinition;\n                // }\n\n                // Setting the words to displayed from state to be server's\n                // response with words\n                this.setState({\n                    words: data[\"words\"]\n                }, () => {\n                    this.generateWordData();\n                })\n\n            })\n        }\n\n    // Generates random word data to be displayed \n    generateWordData() {\n        let randomWordDataIndex = Math.floor(Math.random() * this.state.words.length);\n        let randomWordData = this.state.words[randomWordDataIndex];\n        console.log(this.state.words)\n        this.setState({\n            currentRandomWordData: randomWordData,\n            isWordLoading: false\n        })\n    }\n\n    // Randomises the card for quizzing on display\n    generateQuizCard() {\n        // Gets a random word's data from the array. randomWordDataIndex\n        // is the index location of the word data\n        if (this.state.isWordLoading !== true) {\n            let currentRandomWordData = this.state.currentRandomWordData;\n            console.log(currentRandomWordData.translated_definition)\n            return (\n                <div>\n                    <h2>{currentRandomWordData.translated_word}</h2>\n                    <img src={currentRandomWordData.img} style={{maxWidth: \"100px\"}}></img>\n                </div>\n            )       \n        }   \n    }\n\n    // Checks the answer a user typed in\n    checkAnswer() {\n        if (this.state.answerValue.toLowerCase() === this.state.currentRandomWordData.word.toLowerCase()) {\n            Swal.fire(\"Correct!\")\n            this.generateWordData();\n        }\n    }\n\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n                <h1>Quiz Mode</h1>\n                <div style={{textAlign: \"center\", display: \"inline-block\"}}>\n                    <Paper style={{width: \"120vh\", height: \"80vh\"}} elevation={10}>\n                        {this.generateQuizCard()}\n                        <TextField placeholder=\"Word in English\" value={this.state.answerValue} onChange={(e) => this.setState({answerValue: e.target.value})}></TextField>\n                        <br></br>\n                        <br></br>\n                        <Button variant=\"outlined\" onClick={() => this.checkAnswer()}>Check my answer</Button>\n                    </Paper>\n                </div>\n            </div>\n        )\n    }\n}",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":5,"column":3,"nodeType":"114","messageId":"115","endLine":5,"endColumn":9},{"ruleId":"112","severity":1,"message":"116","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":7},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":15,"column":11,"nodeType":"120","endLine":15,"endColumn":67},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":14},{"ruleId":"112","severity":1,"message":"121","line":3,"column":16,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"112","severity":1,"message":"122","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":16},{"ruleId":"112","severity":1,"message":"123","line":5,"column":18,"nodeType":"114","messageId":"115","endLine":5,"endColumn":27},{"ruleId":"112","severity":1,"message":"124","line":5,"column":29,"nodeType":"114","messageId":"115","endLine":5,"endColumn":35},{"ruleId":"112","severity":1,"message":"125","line":6,"column":10,"nodeType":"114","messageId":"115","endLine":6,"endColumn":23},{"ruleId":"112","severity":1,"message":"126","line":12,"column":7,"nodeType":"114","messageId":"115","endLine":12,"endColumn":12},{"ruleId":"112","severity":1,"message":"117","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":14},{"ruleId":"112","severity":1,"message":"122","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":16},{"ruleId":"112","severity":1,"message":"123","line":5,"column":18,"nodeType":"114","messageId":"115","endLine":5,"endColumn":27},{"ruleId":"112","severity":1,"message":"124","line":5,"column":29,"nodeType":"114","messageId":"115","endLine":5,"endColumn":35},{"ruleId":"112","severity":1,"message":"125","line":6,"column":10,"nodeType":"114","messageId":"115","endLine":6,"endColumn":23},{"ruleId":"112","severity":1,"message":"126","line":11,"column":7,"nodeType":"114","messageId":"115","endLine":11,"endColumn":12},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"127","line":5,"column":18,"nodeType":"114","messageId":"115","endLine":5,"endColumn":23},{"ruleId":"112","severity":1,"message":"128","line":6,"column":5,"nodeType":"114","messageId":"115","endLine":6,"endColumn":12},{"ruleId":"112","severity":1,"message":"129","line":6,"column":14,"nodeType":"114","messageId":"115","endLine":6,"endColumn":18},{"ruleId":"112","severity":1,"message":"130","line":7,"column":5,"nodeType":"114","messageId":"115","endLine":7,"endColumn":14},{"ruleId":"112","severity":1,"message":"131","line":7,"column":16,"nodeType":"114","messageId":"115","endLine":7,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":265,"column":25,"nodeType":"120","endLine":265,"endColumn":134},{"ruleId":"112","severity":1,"message":"132","line":313,"column":19,"nodeType":"114","messageId":"115","endLine":313,"endColumn":24},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"133","line":4,"column":5,"nodeType":"114","messageId":"115","endLine":4,"endColumn":15},{"ruleId":"112","severity":1,"message":"123","line":4,"column":17,"nodeType":"114","messageId":"115","endLine":4,"endColumn":26},{"ruleId":"112","severity":1,"message":"134","line":5,"column":5,"nodeType":"114","messageId":"115","endLine":5,"endColumn":11},{"ruleId":"112","severity":1,"message":"135","line":5,"column":13,"nodeType":"114","messageId":"115","endLine":5,"endColumn":24},{"ruleId":"112","severity":1,"message":"127","line":6,"column":5,"nodeType":"114","messageId":"115","endLine":6,"endColumn":10},{"ruleId":"112","severity":1,"message":"136","line":8,"column":8,"nodeType":"114","messageId":"115","endLine":8,"endColumn":15},{"ruleId":"112","severity":1,"message":"137","line":9,"column":8,"nodeType":"114","messageId":"115","endLine":9,"endColumn":20},{"ruleId":"118","severity":1,"message":"119","line":238,"column":25,"nodeType":"120","endLine":238,"endColumn":134},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"138","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":15},{"ruleId":"112","severity":1,"message":"123","line":3,"column":17,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"112","severity":1,"message":"125","line":4,"column":10,"nodeType":"114","messageId":"115","endLine":4,"endColumn":23},{"ruleId":"112","severity":1,"message":"139","line":4,"column":25,"nodeType":"114","messageId":"115","endLine":4,"endColumn":39},{"ruleId":"112","severity":1,"message":"117","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":26},{"ruleId":"112","severity":1,"message":"116","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":14},{"ruleId":"112","severity":1,"message":"121","line":3,"column":16,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"112","severity":1,"message":"125","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":23},{"ruleId":"112","severity":1,"message":"139","line":5,"column":25,"nodeType":"114","messageId":"115","endLine":5,"endColumn":39},{"ruleId":"118","severity":1,"message":"119","line":153,"column":21,"nodeType":"120","endLine":153,"endColumn":86},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","'AppBar' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'ThemeProvider' is defined but never used.","'theme' is assigned a value but never used.","'Input' is defined but never used.","'Stepper' is defined but never used.","'Step' is defined but never used.","'StepLabel' is defined but never used.","'StepContent' is defined but never used.","'steps' is assigned a value but never used.","'IconButton' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'AddIcon' is defined but never used.","'Autocomplete' is defined but never used.","'Paper' is defined but never used.","'createMuiTheme' is defined but never used.","no-global-assign","no-unsafe-negation"]