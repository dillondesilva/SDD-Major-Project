[{"/Users/dillon/projects/sdd-major/sdd-major-app/src/reportWebVitals.js":"1","/Users/dillon/projects/sdd-major/sdd-major-app/src/App.js":"2","/Users/dillon/projects/sdd-major/sdd-major-app/src/index.js":"3","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Home.js":"4","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Login.js":"5","/Users/dillon/projects/sdd-major/sdd-major-app/src/components/HomeAppBar.js":"6","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Register.js":"7","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Dashboard.js":"8","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/WordlistCreator.js":"9"},{"size":362,"mtime":1612162335286,"results":"10","hashOfConfig":"11"},{"size":757,"mtime":1617235087533,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1612162335284,"results":"13","hashOfConfig":"11"},{"size":1339,"mtime":1617626305130,"results":"14","hashOfConfig":"11"},{"size":3120,"mtime":1616656242863,"results":"15","hashOfConfig":"11"},{"size":1224,"mtime":1615503809529,"results":"16","hashOfConfig":"11"},{"size":4573,"mtime":1617239922839,"results":"17","hashOfConfig":"11"},{"size":12033,"mtime":1619490895644,"results":"18","hashOfConfig":"11"},{"size":16710,"mtime":1618459415651,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4op0ew",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/dillon/projects/sdd-major/sdd-major-app/src/reportWebVitals.js",[],["45","46"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/App.js",["47","48"],"import './App.css';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Dashboard from './pages/Dashboard';\nimport WordlistCreator from './pages/WordlistCreator';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <Home/>\n      </Route>\n      <Route path=\"/login\">\n        <Login/>\n      </Route>\n      <Route path=\"/register\">\n        <Register/>\n      </Route>\n      <Route path=\"/dashboard\">\n        <Dashboard />\n      </Route>\n      <Route path=\"/edit/:id\" component={WordlistCreator}>\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/dillon/projects/sdd-major/sdd-major-app/src/index.js",[],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Home.js",["49","50","51"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Typography } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport HomeAppBar from '../components/HomeAppBar'\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#FFA474',\n      },\n    },\n  },\n  palette: {\n    primary: {\n      main: \"#ffa474\",\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n            <AppBar color='primary' theme={theme}>\n              <div style={{display: \"inline-block\"}}>\n                <h3 style={{marginRight: \"100px\", display: \"inline-block\", textDecoration: \"none\"}}>\n                  <Link to=\"/login\" style={{textDecoration: \"none\"}}>Sign In</Link>\n                </h3> \n                <h3 style={{marginRight: \"100px\", display: \"inline-block\"}}>\n                  <Link to=\"/register\">Register</Link>\n                </h3> \n              </div>\n            </AppBar>\n        </ThemeProvider> \n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Login.js",["52","53"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AppBar, TextField, Button } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// theme stores all the data regarding the styling\n// of several UI elements\nconst theme = createMuiTheme({\n  overrides: {\n    // Overriding the default AppBar and TextField component style\n    MuiAppBar: {\n      colorPrimary: {\n        // Setting its background color to be orange based\n        backgroundColor: '#FFA474',\n      },\n    },\n    MuiTextField: {\n      // Setting its background color to be orange based\n      colorPrimary: {\n        backgroundColor: '#FFA474',\n      },\n    },\n  },\n  // Main color for elements in the orange shade\n  palette: {\n    primary: {\n      main: \"#ffa474\",\n    }\n  },\n});\n\n// React class component for login\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // State variable for this component to store the \n    // value of email and password fields\n    this.state = {\n      emailValue: \"\",\n      pwdValue: \"\"\n    };\n  }\n\n  // Calls verify_user API endpoint to authenticate\n  // a user to the dashboard\n  loginUser() {\n    fetch('/api/userbase/verify_user', {\n      method: 'post',\n      headers: {\n        'Content-Type':  'application/json',\n      }, \n      // Sending the current state with the current email/password\n      // value to Auth API\n      body: JSON.stringify(this.state)\n    })\n    // Get the response json and then set the access token\n    // as well as uid in session storage\n    .then(response => response.json())\n    .then(data => {\n      sessionStorage.setItem(\"access_token\", data.access_token)\n      sessionStorage.setItem(\"uid\", data.uid)\n      // Send user to the dashboard\n      window.location = \"/dashboard\";\n    })\n  }\n\n  // Renders UI elements for the login screen\n  render() {\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n            <AppBar color='primary' theme={theme}>\n              <div style={{display: \"inline-block\"}}>\n                <h3 style={{marginRight: \"100px\", display: \"inline-block\", textDecoration: \"none\"}}>\n                  <Link to=\"/login\" style={{textDecoration: \"none\"}}>Sign In</Link>\n                </h3> \n                <h3 style={{marginRight: \"100px\", display: \"inline-block\"}}>\n                  <Link to=\"/register\">Register</Link>\n                </h3> \n              </div>\n            </AppBar>\n        </ThemeProvider>\n        <div style={{marginTop: \"10%\"}}>\n          <ThemeProvider theme={theme}>\n              <TextField label=\"Email\" color=\"primary\" variant=\"outlined\" onChange={(e) => this.setState({emailValue: e.target.value})}/>\n              <br></br>\n              <TextField label=\"Password\" color=\"primary\" variant=\"outlined\" onChange={(e) => this.setState({pwdValue: e.target.value})}/>\n              <Button onClick={() => this.loginUser()}>Go</Button>\n          </ThemeProvider>\n        </div>\n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/components/HomeAppBar.js",["54","55"],"import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Typography } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#FFA474',\n      },\n    },\n  },\n  palette: {\n    primary: {\n      main: \"#ffa474\",\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nexport default class HomeAppBar extends React.Component {\n  render() {\n    return (\n      <div>\n          <ThemeProvider theme={theme}>\n            <AppBar color='primary' theme={theme}>\n              <div style={{display: \"inline-block\"}}>\n                <h3 style={{marginRight: \"100px\", display: \"inline-block\", textDecoration: \"none\"}}>\n                  <Link to=\"/login\" style={{textDecoration: \"none\"}}>Sign In</Link>\n                </h3> \n                <h3 style={{marginRight: \"100px\", display: \"inline-block\"}}>\n                  <Link to=\"/register\">Register</Link>\n                </h3> \n              </div>\n            </AppBar>\n          </ThemeProvider>\n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Register.js",["56"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { AppBar, TextField, Button, Radio, RadioGroup, FormControl, FormControlLabel, FormLabel } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// theme stores all the data regarding the styling\n// of several UI elements\nconst theme = createMuiTheme({\n  overrides: {\n     // Overriding the default AppBar and TextField component style\n    MuiAppBar: {\n      // Setting its background color to be orange based\n      colorPrimary: {\n        backgroundColor: '#FFA474',\n      },\n    },\n    MuiTextField: {\n      // Setting its background color to be orange based\n      colorPrimary: {\n        backgroundColor: '#FFA474',\n      },\n    },\n  },\n  // Main color for elements in the orange shade\n  palette: {\n    primary: {\n      main: \"#ffa474\",\n    },\n  },\n});\n\n// React class component for the register page\nexport default class Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // State variable for this component to store the \n    // value of registration fields\n    this.state = {\n      emailValue: \"\",\n      usernameValue: \"\",\n      pwdValue: \"\",\n      pwdConfirmValue: \"\",\n      accountType: \"\"\n    };\n  }\n\n  // Calls create_user API Endpoint to add a new user to the database\n  registerUser() {\n    fetch('/api/userbase/create_user', {\n      method: 'post',\n      headers: {\n        'Content-Type':  'application/json',\n      }, \n      // Sends the registration details in state to endpoint\n      body: JSON.stringify(this.state)\n    })\n    // Get the response json\n    .then(response => response.json())\n    .then(data => {\n      if (data[\"error\"]){\n        Swal.fire({\n          title: 'Oops!',\n          text: data[\"error\"],\n          icon: 'error',\n          cancelButtonText: 'Retry'\n        })\n      } else {\n        // Displays account was created and redirects users to login page\n        alert(\"Account created! Proceeding to sign in page :)\")\n        window.location = \"/login\"  \n      }\n    })\n  }\n\n  // Renders UI elements for the registration screen\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <ThemeProvider theme={theme}>\n            <AppBar color='primary' theme={theme}>\n              <div style={{display: \"inline-block\"}}>\n                <h3 style={{marginRight: \"100px\", display: \"inline-block\", textDecoration: \"none\"}}>\n                  <Link to=\"/login\" style={{textDecoration: \"none\"}}>Sign In</Link>\n                </h3> \n                <h3 style={{marginRight: \"100px\", display: \"inline-block\"}}>\n                  <Link to=\"/register\">Register</Link>\n                </h3> \n              </div>\n            </AppBar>\n          </ThemeProvider> \n          <div style={{marginTop: \"10%\"}}>\n            <ThemeProvider theme={theme}>\n                  <TextField value={this.state.emailValue} label=\"Email\" color=\"primary\" variant=\"outlined\" \n                  onChange={(e) => this.setState({emailValue: e.target.value})}/>\n                  <br></br>\n                  <TextField label=\"Username\" color=\"primary\" variant=\"outlined\" \n                  onChange={(e) => this.setState({usernameValue: e.target.value})}/>\n                  <br></br>\n                  <TextField label=\"Password\" color=\"primary\" variant=\"outlined\"\n                  onChange={(e) => this.setState({pwdValue: e.target.value})}/>\n                  <br></br>\n                  <TextField label=\"Confirm Password\" color=\"primary\" variant=\"outlined\"\n                  onChange={(e) => this.setState({pwdConfirmValue: e.target.value})}/>\n                  <br></br>\n                  <br></br>\n                  <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">I am a</FormLabel>\n                    <RadioGroup aria-label=\"gender\" name=\"gender1\" style={{display: \"inline\"}} value={this.state.accountType}\n                    onChange={(e) => this.setState({accountType: e.target.value})}>\n                      <FormControlLabel value=\"student\" control={<Radio />} label=\"Student\" />\n                      <FormControlLabel value=\"teacher\" control={<Radio />} label=\"Teacher\" />\n                    </RadioGroup>\n                  </FormControl>\n                  <br></br>\n                  <Button onClick={() => this.registerUser()}>Go</Button>\n              </ThemeProvider>  \n          </div>\n        </div>\n      </div>\n    ); \n  }\n}","/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/Dashboard.js",["57"],"/Users/dillon/projects/sdd-major/sdd-major-app/src/pages/WordlistCreator.js",["58","59","60"],"// Importing React and necessary dependencies for project\nimport React, { useEffect } from 'react'\nimport { Paper, Button, IconButton, TextField, Dialog, DialogTitle, Input } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n// React class component for wordlist creation\nexport default class WordlistCreator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // State variable for this component to store userDetails,\n        // as well as any details about a word being added in\n        // progress\n        this.state = {\n            userDetails: {\n                username: \"\",\n                email: \"\"\n            },\n            wordlistCode: \"\", // short id for wordlist\n            openWord: false, // is the dialog for creating a wordlist panel open?\n            wordToAdd: \"\", // a string storing the word to add\n            definitionToAdd: \"\", // a string storing the definition to add\n            wordTranslationToAdd: \"\", // a string storing the translation of a word\n            imageToAdd: \"\", // stores the base64 image string\n            definitionTranslationToAdd: \"\", // a string storing the translation of a word definition\n            words: [], // an array of words currently in the list\n            selectedWord: \"none\", // the currently selected word in the viewer\n            openAssignWordlist: false, // should the dialog box for managing students to a wordlist be open\n            assignedStudents: [], // assignedStudents stores student names assigned to the wordlist\n            students: [], // students stores the possible options for assignments\n            studentsToAdd: [] // stores the students to add to a wordlist during the assignment process\n        }\n    }\n\n    // Adding user details pre render\n    componentWillMount() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Gets the wordlist code from the URL parameters\n        let wordlistCode = this.props.match.params.id;\n        this.setState({\n            wordlistCode: wordlistCode\n        }, () => {\n            // Gets the current words to display in a wordlist\n            this.getWords();\n            this.getStudents();\n        })\n\n        // Calling API Endpoint to get user details based\n        // off the UID in sessionStorage\n        fetch('/api/userbase/get_user_by_uid', {\n            method: 'post',\n            headers: {\n              'Content-Type':  'application/json',\n            }, \n            body: JSON.stringify({\"uid\": uid})\n          })\n          // Get the response json\n          .then(response => response.json())\n          .then(data => {\n              // Sets the userDetails state to store whatever the server returned\n              this.setState({userDetails: data});\n        })\n    }\n\n    // Calls the addWord API Endpoint and then adds a given word\n    // to the current wordlist\n    addWord() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Instantiating a new file reader to convert \n        // user selected image to blob\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            console.log(reader.result)\n        })\n\n        // An object with all the data for the word to be added\n        let wordData = {\n            \"uid\": uid,\n            \"wordToAdd\": this.state.wordToAdd,\n            \"definitionToAdd\": this.state.definitionToAdd,\n            \"wordTranslationToAdd\": this.state.wordTranslationToAdd,\n            \"definitionTranslationToAdd\": this.state.definitionTranslationToAdd,\n            \"wordlistCode\": this.state.wordlistCode,\n            \"imageToAdd\": this.state.imageToAdd\n        }\n\n        // Calling the API Endpoint for adding a word\n        fetch('/api/wordlist/add_word', {\n            method: 'post',\n            headers: {\n              'Content-Type':  'application/json',\n            }, \n            // Sending word data to add\n            body: JSON.stringify(wordData)\n          })\n          // Get the response json\n          .then(response => response.json())\n          .then(data => {\n            // Setting the add new word panel to be closed\n            this.setState({\n                openWord: false\n            }, () => {\n                // Refresh the words displayed\n                this.getWords();\n            })\n        })\n    }\n\n    // When the file input has been changed, event handler\n    // is fileToBlob() which takes the data and finds the file\n    fileToBlob(eventData) {\n        // Instantiating a new file reader to convert \n        // user selected image to blob \n        const reader = new FileReader();\n        const file = eventData.target.files[0];\n\n        // Converts intoo a data blob and stores in state\n        reader.addEventListener(\"load\", () => {\n            // convert image file to base64 string\n            this.setState({\n                imageToAdd: reader.result\n            })\n        }, false);\n\n        // If there is a file, do use the reader instance\n        // to convert file into a data blob\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n\n    // Gets all the current words\n    getWords() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Comprises a query to put in database for \n        // this specific wordlists's words\n        let wordlistData = {\n            \"uid\": uid,\n            \"wordlistCode\": this.state.wordlistCode\n        }\n\n        // Calling the get_words API endpoint\n        fetch('/api/wordlist/get_words', {\n            method: 'post',\n            headers: {\n                'Content-Type':  'application/json',\n            }, \n            // Sending wordlistData info to server\n            body: JSON.stringify(wordlistData)\n            })\n            // Get the response json\n            .then(response => response.json())\n            .then(data => {\n                // Setting the words to displayed from state to be server's\n                // response with words\n                this.setState({\n                    words: data[\"words\"]\n                })\n        }) \n    }\n\n    // Gets the current students under a teacher and updates\n    // the state of known students\n    getStudents() {\n        let uid = sessionStorage.getItem(\"uid\");\n\n        // Getting students that belong to a teacher\n        fetch('/api/userbase/get_students', {\n            method: 'post',\n            headers: {\n                'Content-Type':  'application/json',\n            }, \n            body: JSON.stringify({\"uid\": uid})\n            })\n            // Get the response json\n            .then(response => response.json())\n            .then(data => {\n                // Sets the students state to store whatever the server returned\n                this.setState({students: data[\"students\"]})\n        }) \n    }\n\n    // Changes the selected word in the side panel from a given index\n    // This is the event handler for when a word is pressed for viewing\n    changeSelectedWord(selectedWordIndex) {\n        // Gets the current word data of the selected index\n        let selectedWordData = this.state.words[selectedWordIndex]\n        // Change the selected word\n        this.setState({\n            selectedWord: selectedWordData\n        }, () => {\n            // Debug statement to check selectedWord has appeared correctly\n            console.log(this.state.selectedWord)\n        })\n    }\n\n    // This is called by a map function for each word\n    renderWordCard() {\n        // Return an empty card indicating to select a word if no\n        // word has been selected\n        if (this.state.selectedWord === \"none\") {\n            return (\n                <Paper elevation={3} style={{width: \"700px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\", display: \"relative\"}}>\n                    <div style={{position: \"absolute\", top: \"65%\", left: \"50%\", width: \"300px\", height: \"300px\", marginTop: \"-150px\", marginLeft: \"-150px\"}}>\n                        <h1 style={{textAlign: \"center\"}}>No Word Selected</h1>\n                        <p style={{textAlign: \"center\"}}>Please select a word to view from the panel to the left</p>\n                    </div>\n                </Paper>  \n            )\n        } else {\n            // Return a styled word card with the appropriate information and image\n            return (\n                <Paper elevation={3} style={{width: \"700px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\"}}>\n                    <h2 style={{paddingLeft: \"5%\", paddingTop: \"5%\", textAlign: \"left\"}}>{this.state.selectedWord.word}</h2>\n                    <h3 style={{paddingLeft: \"5%\", textAlign: \"left\", color: \"grey\", fontWeight: \"400\"}}>{this.state.selectedWord.translated_word}</h3>\n                    <div style={{textAlign: \"center\"}}>\n                        <img src={this.state.selectedWord.img} style={{position: \"relative\", maxWidth: \"300px\", maxHeight: \"200px\"}}></img>\n                    </div>\n                    <br></br>\n                    <p style={{paddingLeft: \"5%\", paddingTop: \"1%\", textAlign: \"left\"}}>{this.state.selectedWord.definition}</p>\n                    <p style={{paddingLeft: \"5%\", paddingTop: \"1%\", textAlign: \"left\", color: \"grey\"}}>{this.state.selectedWord.translated_definition}</p>\n                </Paper>      \n            )\n        }\n    }\n\n    // Adds students to a wordlist following the assignment process\n    addStudentsToWordlist() {\n        // addRequestData stores all the data to send to server for assigning wordlists\n        // to students\n        let addRequestData = {\n            studentsToAdd: this.state.studentsToAdd,\n            wordlistCode: this.state.wordlistCode\n        };\n\n        fetch('/api/userbase/add_students_to_wordlist', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(addRequestData)\n        })\n        // Get the response json\n        .then(response => response.json())\n        .then(data => {\n            // Re render the current students assigned to the list\n            this.getStudents()\n        }) \n    }\n\n    // Renders UI elements for the wordlist editor\n    render() {\n        if (this.state.accountType === \"student\") {\n            // Return Student Wordlist Editor (not implemented yet)\n        } else {\n            // Return Teacher Wordlist Editor UI Elements\n            return (\n                <div>\n                    <div style={{paddingTop: \"1%\"}}>\n                        <h1 style={{paddingLeft: \"2%\", display: \"inline\"}}>10 IST</h1>\n                        <div style={{paddingRight: \"1%\", display: \"inline\"}}>\n                            <Button style={{float: \"right\"}} onClick={() => this.setState({openAssignWordlist: true})}>Assign Wordlist</Button>\n                        </div>\n                    </div>\n                    <div style={{marginLeft: \"2%\"}}>\n                        <div style={{display: \"inline-block\", marginRight: \"40%\"}}>\n                            <Paper elevation={3} style={{width: \"400px\", height: \"500px\", borderRadius: \"10px\", position: \"absolute\"}}>\n                                <div style={{display: \"inline-block\", width: \"100%\"}}>\n                                    <div style={{position: \"absolute\", paddingLeft: \"5%\", paddingTop: \"5%\",}}>\n                                        <h2 style={{textAlign: \"left\"}}>Your Words</h2>\n                                        <h3 style={{textAlign: \"left\", color: \"grey\", fontWeight: \"400\"}}>Jou woorde</h3>\n                                    </div>\n                                    <div style={{paddingRight: \"5%\", paddingTop: \"12%\"}}>\n                                        <IconButton aria-label=\"delete\" style={{backgroundColor: \"#FF7979\", float: \"right\"}} onClick={() => this.setState({openWord: true})}>\n                                            <AddIcon style={{color: \"white\"}}/>\n                                        </IconButton> \n                                    </div>\n                                </div>\n                                <div style={{textAlign: \"center\", paddingTop: \"10%\"}}>\n                                    {\n                                        this.state.words.map((word, index) => {\n                                            // wordIndex refers to the index of the word within this.state.words\n                                            // for selection\n                                            let wordIndex = index\n                                            return (\n                                                <Button style={{width: \"100%\", borderRadius: \"0\"}} onClick={() => this.changeSelectedWord(wordIndex)}>{word.word}</Button> \n                                            )\n                                        })\n                                    }\n                                </div>\n                            </Paper>\n                        </div>\n                        <div style={{display: \"inline-block\"}}>\n                            { this.renderWordCard() }\n                        </div>\n                    </div>\n                    <Dialog fullScreen open={this.state.openWord} onClose={() => this.setState({openWord: false})}>\n                        <DialogTitle>Add Word</DialogTitle>\n                        <div style={{marginLeft: \"5%\"}}>\n                            <Paper elevation={0} style={{textAlign: \"center\"}}>\n                                <TextField label=\"Word in English\" variant=\"outlined\" style={{marginTop: \"20px\", width: \"80%\"}} onChange={(e) => this.setState({wordToAdd: e.target.value})}></TextField>\n                                <br></br>\n                                <TextField label=\"Definition in English\" variant=\"outlined\" style={{marginTop: \"20px\", width: \"80%\"}} onChange={(e) => this.setState({definitionToAdd: e.target.value})}></TextField>\n                                <br></br>\n                                <TextField label=\"Word in Alternate Language\" variant=\"outlined\" style={{marginTop: \"20px\", width: \"80%\"}} onChange={(e) => this.setState({wordTranslationToAdd: e.target.value})}></TextField>\n                                <br></br>\n                                <TextField label=\"Definition in Alternate Language\" variant=\"outlined\" style={{marginTop: \"20px\", width: \"80%\"}} onChange={(e) => this.setState({definitionTranslationToAdd: e.target.value})}></TextField>\n                                <br></br>\n                                <Button variant=\"contained\" component=\"label\">\n                                    Upload Image\n                                    <input type=\"file\" onChange={(e) => this.fileToBlob(e)} hidden/>\n                                </Button>\n                                <br></br>\n                                <div style={{textAlign: \"center\"}}>\n                                    <Button color=\"primary\" variant=\"filled\" onClick={() => this.addWord()}>Add Word</Button>\n                                </div>\n                            </Paper>\n                        </div>\n                    </Dialog>\n                    <Dialog open={this.state.openAssignWordlist} onClose={() => this.setState({openAssignWordlist: false})} maxWidth={\"md\"} fullWidth={true}>\n                        <DialogTitle>Assign Students</DialogTitle>\n                        <div style={{marginLeft: \"5%\"}}>\n                            <Paper elevation={0} style={{textAlign: \"center\"}}>\n                            <Autocomplete\n                            multiple\n                            value={this.state.studentsToAdd}\n                            options={this.state.students}\n                            getOptionLabel={(option) => option[1]}\n                            style={{ width: 300 }}\n                            onChange={(event, value) => this.setState({studentsToAdd: value})}\n                            renderInput={(params) => <TextField {...params} label=\"Search for student\" variant=\"outlined\" />}\n                            />\n                            <Button onClick={() => this.addStudentsToWordlist()}>Add</Button>\n                                {\n                                    this.state.students.map((student, index) => {\n                                        return (\n                                            <p>{student[1]}</p>  \n                                        )\n                                    })\n                                }\n                            </Paper>\n                        </div>\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n}",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":5,"column":3,"nodeType":"67","messageId":"68","endLine":5,"endColumn":9},{"ruleId":"65","severity":1,"message":"69","line":7,"column":3,"nodeType":"67","messageId":"68","endLine":7,"endColumn":7},{"ruleId":"65","severity":1,"message":"70","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"71","line":4,"column":18,"nodeType":"67","messageId":"68","endLine":4,"endColumn":28},{"ruleId":"65","severity":1,"message":"72","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":18},{"ruleId":"65","severity":1,"message":"70","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"73","line":3,"column":16,"nodeType":"67","messageId":"68","endLine":3,"endColumn":26},{"ruleId":"65","severity":1,"message":"70","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"71","line":3,"column":18,"nodeType":"67","messageId":"68","endLine":3,"endColumn":28},{"ruleId":"65","severity":1,"message":"70","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"70","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"70","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"74","line":3,"column":69,"nodeType":"67","messageId":"68","endLine":3,"endColumn":74},{"ruleId":"75","severity":1,"message":"76","line":221,"column":25,"nodeType":"77","endLine":221,"endColumn":134},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useEffect' is defined but never used.","'Typography' is defined but never used.","'HomeAppBar' is defined but never used.","'useHistory' is defined but never used.","'Input' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]